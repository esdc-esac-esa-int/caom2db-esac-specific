#!/bin/bash

usage()
{
    echo "caom2harvestAll"
    echo
    echo "This is a simple wrapper script that runs caom2harvester for "
    echo "each source database. It is intended for direct use in a crontab"
    echo "with a recommended interval of 5+ minutes."
    echo
    echo "usage: caom2harvestAll <config>"
    echo
    echo "config format:"
    echo
    echo "GRCERT=/path/to/valid.pem" 
    echo "LOGDIR=/path/to/logs"
    echo "TARGET=<server>                    (e.g. cvodb0)"
    echo "SOURCES=<server>.<database> ...    (e.g. SYBASE.cfht)"   
    echo "ACDA=<server>.<database> ...       (e.g. SYBASE.cfht)"
    echo
    echo "LOGDIR:  This is the path to log files from the invoked applications."
    echo "         A subdirectory for the target cvodb server will be created if"
    echo "         necessary. Logfiles will be timestamped. The control file used"
    echo "         to avoid running multiple instances with the same source DB also"
    echo "         gets stored here so *do not* edit this setting while any cron"
    echo "         jobs are running."
    echo
    echo "TARGET:  This is the target PostgreSQL server. It supports a single"
    echo "         value so harvesting to each server is controlled by a separate"
    echo "         cron job."
    echo
    echo "SOURCES: This is the list of source (sybase) databases. The server and"
    echo "         database name have to be resolved in the users $HOME/.dbrc file"
    echo "         for credentials and connection information (read-only)."
    echo
    echo "optional config to enable caom2AccessControlDA:"
    echo
    echo "GRCERT:  A proxy certficate for the owner of archive groups to be created."
    echo
    echo "ACDA:    This is a list of variables whose name is one of the database names"
    echo "         in SOURCES (e.g. without the server name and whose value is the"
    echo "         archive name for invoking the accessControlDA." 
    echo
    echo "         The caom2AccessControlDA will be invoked to generate ReadAccess tuples"
    echo "         in the source database (before caom2harvester)"
    echo
    echo "         Example: SOURCES=\"SYBASE.cfht SYBASE.hstcaom2 SYBASE.macho\""
    echo "                  ACDA=hstcaom2"
    echo "                  hstcaom2=HST"
    echo
    echo "         Here, hstcaom2 is the database name and HST is the archive name."
    echo
    echo "optional config for caom2harvester:"
    echo
    echo "HARVEST_BATCH:        set --batchSize   [optional, default: 10]"
    echo "HARVEST_BATCH_FACTOR: set --batchFactor [optional, default: 2000]"
    echo
    echo "HARVEST_ARG:          add a single extra argument [optional]"
    echo "                      useful values: --skip (reprocess skipped entries)"
    echo "LOG2VOS:              enable copying caom2harvester log to vospace [optional, default 0]"
    echo "                      useful values: 0 or 1"
    echo "                      WARNING: destination log file name has no server name or timestamp so"
    echo "                               this is intended to overwrite a previous log file and is"
    echo "                               only useful if used with one destination server and --skip"
    echo
    echo "WARNING: Using file or path names with spaces is likely to break this script."
}

if [ -z "$1" ]; then
    usage
    exit 1
fi

CONFIG="$1"
if [[ ! -f $CONFIG ]]; then
    echo "config file not found: $CONFIG"
    usage
    exit 1
fi

. "$CONFIG"

if [ -z $GRCERT ]; then
    echo "missing GRCERT from $CONFIG"
    usage
    exit 1
elif [ ! -f $GRCERT ]; then
    echo "certificate file not found: $GRCERT"
    usage
    exit 1
fi

if [ -z $LOGDIR ]; then
    echo "missing LOGDIR from $CONFIG"
    usage
    exit 1
fi

if [ -z $TARGET ]; then
    echo "missing TARGET from $CONFIG"
    usage
    exit 1
fi

if [ -z "$SOURCES" ]; then
    echo "missing SOURCES from $CONFIG"
    usage
    exit 1
fi

# optional ALT_ARG
ALT_ARG=""
if [ ! -z "$HARVEST_ARG" ]; then
	ALT_ARG="${HARVEST_ARG}"
fi

# optional BATCH control
BATCH_SIZE=10
BATCH_FACTOR=2000
if [ ! -z "$HARVEST_BATCH_SIZE" ]; then
        BATCH_SIZE="${HARVEST_BATCH_SIZE}"
fi
if [ ! -z "$HARVEST_BATCH_FACTOR" ]; then
        BATCH_FACTOR="${HARVEST_BATCH_FACTOR}"
fi

LOGDIR=${LOGDIR}/$TARGET
test -d $LOGDIR || echo "creating logdir: ${LOGDIR}" && mkdir -p $LOGDIR

LOG_SUFFIX=$(date +"%Y%m%d%H%M%S")

VOS_LOG=$LOGDIR/copy-to-vospace.log

for src in $SOURCES; do
    SOURCE="${src}.dbo"
    DEST="${TARGET}.cvodb.caom2"
    
    LOG=$LOGDIR/${SOURCE}${ALT_ARG}-${LOG_SUFFIX}.log
    LOGLINK=$LOGDIR/${SOURCE}${ALT_ARG}.latest
    
    ACLOG=$LOGDIR/${SOURCE}-ac-${LOG_SUFFIX}.log
    ACLOGLINK=$LOGDIR/${SOURCE}-ac.latest

    ARC=""
    TRACK=$LOGDIR/${SOURCE}${ALT_ARG}.run
    if [ -e $TRACK ]; then
        echo "blocked: $LOG_SUFFIX" >> $TRACK
    else
        touch $TRACK
        CUR_UTC=$(date --utc +"%Y-%m-%dT%H:%M:%S.000")

        for ac in $ACDA; do
            db=$(echo $src | awk -F '.' '{print $2}')
            if [ $db == $ac ]; then
## tricksy bash: ${!ac} is the value of a variable named $ac
                for ARC in ${!ac}; do
                    test -L $ACLOGLINK && \rm $ACLOGLINK
                    ln -s $(basename $ACLOG) $ACLOGLINK
                    $CADC_ROOT/scripts/caom2AccessControlDA -v --archive=$ARC --database=$SOURCE \
                        --cert=$GRCERT &> $ACLOG
                done
            fi
        done
        
        touch $LOG
        test -L $LOGLINK && \rm $LOGLINK
        ln -s $(basename $LOG) $LOGLINK
        $CADC_ROOT/scripts/caom2harvester -v ${ALT_ARG}  --maxDate=$CUR_UTC \
		--batchSize=$BATCH_SIZE --batchFactor=$BATCH_FACTOR \
		--source=$SOURCE --destination=$DEST &> $LOG
        
        if [ $? == 0 ]; then
            if [ $LOG2VOS == "1" ]; then
                touch $VOS_LOG
                $CADC_ROOT/scripts/vosClient -v --copy --src=$LOG \
                    --dest=vos://cadc.nrc.ca~vospace/CADC/caom2/${SOURCE}${ALT_ARGS}.log >> $VOS_LOG
            fi
            if [ $? == 0 ]; then
                rm $TRACK
            fi
        fi
    fi
done



